<?xml version="1.0"?>
<settings:SettingsView xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:settings="actionScripts.plugin.settings.*">
    <fx:Script><![CDATA[
        import actionScripts.plugin.settings.vo.AbstractSetting;
        import actionScripts.plugin.settings.vo.ISetting;
        import actionScripts.plugin.settings.vo.PathSetting;
        import actionScripts.plugin.settings.vo.SettingsWrapper;

        import mx.core.FlexGlobals;

        import mx.events.CloseEvent;

        import mx.managers.PopUpManager;

        import spark.components.Alert;
        import spark.components.BusyIndicator;
        import spark.components.Label;
        import spark.components.VGroup;
        import spark.layouts.HorizontalAlign;
        import spark.layouts.VerticalAlign;

        override public function save():void
        {
            var settingsWrappers:Vector.<SettingsWrapper> = getSettingsForAllCategories();
            var requiredSetting:ISetting = null;

            for each (var wrapper:SettingsWrapper in settingsWrappers)
            {
                var settings:Vector.<ISetting> = wrapper.getSettingsList();
                for each (var setting:ISetting in settings)
                {
                    var settingValue:String = setting.stringValue;
                    if(!settingValue)
                    {
                        requiredSetting = setting;
                        break;
                    }
                }

                if(requiredSetting)
                {
                    break;
                }
            }

            if(requiredSetting && requiredSetting is PathSetting)
            {
                requiredSetting.renderer["setMessage"]("This field is required to generate report", AbstractSetting.MESSAGE_CRITICAL);
                (requiredSetting as AbstractSetting).addEventListener(AbstractSetting.PATH_SELECTED, onRequiredSettingPathSelect);
            }
            else
            {
                var reportInfoPopup:RoyaleApiInfoPopup = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, RoyaleApiInfoPopup) as RoyaleApiInfoPopup;
                reportInfoPopup.addEventListener(CloseEvent.CLOSE, onCloseInfoPopup);
                PopUpManager.centerPopUp(reportInfoPopup);
            }
<<<<<<< HEAD
            else
            {
                showBusyIndicator();
                super.save();
            }
=======
>>>>>>> 92ff5125168850808ad3ca34c255766347da5d9a
        }

        private function onCloseInfoPopup(event:CloseEvent):void
        {
            event.currentTarget.removeEventListener(CloseEvent.CLOSE, onCloseInfoPopup);
            if (event.detail == Alert.CANCEL)
            {
                close();
                dispatchEvent(new CloseEvent(CloseEvent.CLOSE, false, false, Alert.CANCEL));
                return;
            }

            showBusyIndicator();
            super.save();
        }

        private function onRequiredSettingPathSelect(event:Event):void
        {
            event.target.renderer["setMessage"](null, AbstractSetting.MESSAGE_CRITICAL);
            event.target.removeEventListener(AbstractSetting.PATH_SELECTED, onRequiredSettingPathSelect);
        }
<<<<<<< HEAD

        private function onDoNotShowPromptApiReprot(event:RoyaleApiReportEvent):void
        {
            this.doNotShowPromptAgain = event.doNotShowApiPromptReport;
        }

        private function showBusyIndicator():void
        {
            var busyContainer:VGroup = new VGroup();
            busyContainer.verticalAlign = VerticalAlign.MIDDLE;
            busyContainer.horizontalAlign = HorizontalAlign.CENTER;

            busyContainer.horizontalCenter = 0;
            busyContainer.verticalCenter = 0;

            var busyIndicator:BusyIndicator = new BusyIndicator();
            busyIndicator.setStyle("symbolColor", "0x444444");
            busyIndicator.width = busyIndicator.height = 30;
            var lbl:Label = new Label();
            lbl.setStyle("color", "#e252d3");
            lbl.setStyle("fontWeight", "bold");
            lbl.setStyle("fontSize", 16);
            lbl.text = "Generating API report is in progress...";

            busyContainer.addElement(busyIndicator);
            busyContainer.addElement(lbl);

            settingsContainer.addElement(busyContainer);
        }
=======
>>>>>>> 92ff5125168850808ad3ca34c255766347da5d9a
        ]]></fx:Script>
</settings:SettingsView>
